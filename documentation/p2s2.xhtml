<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>com.io7m.r2 0.3.0-SNAPSHOT Documentation: 2.2. Concepts</title><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><link rel="stylesheet" type="text/css" href="kstructural-layout.css"/><link rel="stylesheet" type="text/css" href="kstructural-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st300_body"><div class="st300_navbar st300_navbar_top"><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_title_cell">2.1. Conventions</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.3. Coordinate Systems</td></tr><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s1.xhtml#st300_p2s1" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s3.xhtml#st300_p2s3" title="Go to next page">Next</a></td></tr></table><hr class="st300_hr"/></div><div class="st300_section_container"><a id="di.concepts"/><div class="st300_section_title_number"><a id="st300_p2s2" href="#st300_p2s2" title="Section 2.2: Concepts">2.2</a></div><div class="st300_section_title">Concepts</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss1" title="Link to subsection 2.2.1: Overview">2.2.1. Overview</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss2" title="Link to subsection 2.2.2: Renderer">2.2.2. Renderer</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss3" title="Link to subsection 2.2.3: Render Target">2.2.3. Render Target</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss4" title="Link to subsection 2.2.4: Geometry Buffer">2.2.4. Geometry Buffer</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss5" title="Link to subsection 2.2.5: Light Buffer">2.2.5. Light Buffer</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss6" title="Link to subsection 2.2.6: Mesh">2.2.6. Mesh</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss7" title="Link to subsection 2.2.7: Transform">2.2.7. Transform</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss8" title="Link to subsection 2.2.8: Instance">2.2.8. Instance</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss9" title="Link to subsection 2.2.9: Light">2.2.9. Light</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss10" title="Link to subsection 2.2.10: Light Clip Group">2.2.10. Light Clip Group</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss11" title="Link to subsection 2.2.11: Light Group">2.2.11. Light Group</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss12" title="Link to subsection 2.2.12: Shader">2.2.12. Shader</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s2.xhtml#st300_p2s2ss13" title="Link to subsection 2.2.13: Material">2.2.13. Material</a></li></ul><div class="st300_subsection_container"><div class="st300_subsection_title_number"><a id="st300_p2s2ss1" href="#st300_p2s2ss1" title="Subsection 2.2.1: Overview">2.2.1</a></div><div class="st300_subsection_title">Overview</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss1c1" href="#st300_p2s2ss1c1" title="Paragraph 2.2.1.1">1</a></div><div class="st300_paragraph">This section attempts to provide a rough overview of the concepts present in the <span class="st300_term package">r2</span> package. Specific implementation details, mathematics, and other technical information is given in later sections that focus on each concept in detail.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.renderer"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss2" href="#st300_p2s2ss2" title="Subsection 2.2.2: Renderer">2.2.2</a></div><div class="st300_subsection_title">Renderer</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c1" href="#st300_p2s2ss2c1" title="Paragraph 2.2.2.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">renderer</span> is a function that takes an input of some type and produces an output to a <a class="st300_link" href="p2s2.xhtml#di.concepts.render_target">render target</a>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss2c2" href="#st300_p2s2ss2c2" title="Paragraph 2.2.2.2">2</a></div><div class="st300_paragraph">The renderers expose an interface of stateless functions from inputs to outputs. That is, the renderers should be considered to simply take input and produce return images as output. In reality, because the Java language is not pure and because the code is required to perform I/O in order to speak to the GPU, the renderer functions are not <span class="st300_term emphasis">really</span> pure. Nevertheless, for the sake of ease of use, lack of surprising results, and correctness, the renderers at least attempt to adhere to the idea of pure functional rendering! This means that the renderers are very easy to integrate into any existing system: They are simply functions that are evaluated whenever the programmer wants an image. The renderers do not have their own main loop, they do not have any concept of time, do not remember any images that they have produced previously, do not maintain any state of their own, and simply write their results to a programmer-provided render target. Passing the same input to a renderer multiple times should result in the same image each time.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.render_target"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss3" href="#st300_p2s2ss3" title="Subsection 2.2.3: Render Target">2.2.3</a></div><div class="st300_subsection_title">Render Target</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss3c1" href="#st300_p2s2ss3c1" title="Paragraph 2.2.3.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">render target</span> is a rectangular region of memory allocated on the GPU that can accept the results of a rendering operation. The programmer typically allocates one render target, passes it to a renderer along with a renderer-specific input value, and the renderer populates the given render target with the results. The programmer can then copy the contents of this render target to the screen for viewing, pass it on to a separate filter for extra visual effects, use it as a texture to be applied to objects in further rendered images, etc.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.gbuffer"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss4" href="#st300_p2s2ss4" title="Subsection 2.2.4: Geometry Buffer">2.2.4</a></div><div class="st300_subsection_title">Geometry Buffer</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss4c1" href="#st300_p2s2ss4c1" title="Paragraph 2.2.4.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">geometry buffer</span> is a specific type of <a class="st300_link" href="p2s2.xhtml#di.concepts.render_target">render target</a> that contains the surface attributes of a set of rendered <a class="st300_link" href="p2s2.xhtml#di.concepts.instance">instances</a>. It is a fundamental part of <span class="st300_term term">deferred rendering</span> that allows lighting to be efficiently calculated in <a class="st300_link" href="p2s3.xhtml#di.coords.screen">screen space</a>, touching only those pixels that will actually contribute to the final rendered image.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.lbuffer"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss5" href="#st300_p2s2ss5" title="Subsection 2.2.5: Light Buffer">2.2.5</a></div><div class="st300_subsection_title">Light Buffer</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss5c1" href="#st300_p2s2ss5c1" title="Paragraph 2.2.5.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">light buffer</span> is a specific type of <a class="st300_link" href="p2s2.xhtml#di.concepts.render_target">render target</a> that contains the summed light contributions for each pixel in the currently rendered scene.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.mesh"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss6" href="#st300_p2s2ss6" title="Subsection 2.2.6: Mesh">2.2.6</a></div><div class="st300_subsection_title">Mesh</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss6c1" href="#st300_p2s2ss6c1" title="Paragraph 2.2.6.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">mesh</span> is a collection of vertices that define a polyhedral object, along with a list of indices that describe how to make triangles out of the given vertices.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss6c2" href="#st300_p2s2ss6c2" title="Paragraph 2.2.6.2">2</a></div><div class="st300_paragraph">Meshes are allocated on the GPU and can be shared between any number of <a class="st300_link" href="p2s2.xhtml#di.concepts.instance">instances</a> (meaning that rendering 100 identical objects does not require storing 100 copies of the mesh data).</div></div></div><div class="st300_subsection_container"><a id="di.concepts.transform"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss7" href="#st300_p2s2ss7" title="Subsection 2.2.7: Transform">2.2.7</a></div><div class="st300_subsection_title">Transform</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss7c1" href="#st300_p2s2ss7c1" title="Paragraph 2.2.7.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">transform</span> moves coordinates in one <a class="st300_link" href="p2s3.xhtml#di.coords">coordinate space</a> to another. Typically, a transform is used to position and orient a <a class="st300_link" href="p2s2.xhtml#di.concepts.mesh">mesh</a> inside a visible set.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.instance"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss8" href="#st300_p2s2ss8" title="Subsection 2.2.8: Instance">2.2.8</a></div><div class="st300_subsection_title">Instance</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss8c1" href="#st300_p2s2ss8c1" title="Paragraph 2.2.8.1">1</a></div><div class="st300_paragraph">An <span class="st300_term term">instance</span> is essentially an object or group of objects that can be rendered. Instances come in several forms: <span class="st300_term term">single</span>, <span class="st300_term term">batched</span>, and <span class="st300_term term">billboarded</span>.</div></div><div class="st300_paragraph_container"><a id="di.concepts.instance.single"/><div class="st300_paragraph_number"><a id="st300_p2s2ss8c2" href="#st300_p2s2ss8c2" title="Paragraph 2.2.8.2">2</a></div><div class="st300_paragraph">A <span class="st300_term term">single</span> instance consists of a reference to a <a class="st300_link" href="p2s2.xhtml#di.concepts.mesh">mesh</a> and a <a class="st300_link" href="p2s2.xhtml#di.concepts.transform">transform</a> for positioning the instance within a scene.</div></div><div class="st300_paragraph_container"><a id="di.concepts.instance.batched"/><div class="st300_paragraph_number"><a id="st300_p2s2ss8c3" href="#st300_p2s2ss8c3" title="Paragraph 2.2.8.3">3</a></div><div class="st300_paragraph">A <span class="st300_term term">batched</span> instance consists of a reference to a mesh and an array of transforms. The results of rendering a batched instance are the same as if a single instance had been created and rendered for each transform in the array. The advantage of batched instances is efficiency: Batched instances are submitted to the GPU for rendering in a single <span class="st300_term term">draw call</span>. Reducing the total number of draw calls per scene is an important optimization on modern graphics hardware, and batched instances provide a means to achieve this.</div></div><div class="st300_paragraph_container"><a id="di.concepts.instance.billboarded"/><div class="st300_paragraph_number"><a id="st300_p2s2ss8c4" href="#st300_p2s2ss8c4" title="Paragraph 2.2.8.4">4</a></div><div class="st300_paragraph">A <span class="st300_term term">billboarded</span> instance is a further specialization of a <span class="st300_term term">batched</span> instance intended for rendering large numbers of objects that always face towards the observer. Billboarding is a technique that is often used to render large numbers of distant objects in a scene: Rather than incur the overhead of rendering lots of barely-visible objects at full detail, the objects are replaced with billboarded <span class="st300_term term">sprites</span> at a fraction of the cost. There is also a significant saving in the memory used to store transforms, because a billboarded sprite need only store a <span class="st300_term term">position</span> and <span class="st300_term term">scale</span> as opposed to a full transform matrix per rendered object.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.light"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss9" href="#st300_p2s2ss9" title="Subsection 2.2.9: Light">2.2.9</a></div><div class="st300_subsection_title">Light</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss9c1" href="#st300_p2s2ss9c1" title="Paragraph 2.2.9.1">1</a></div><div class="st300_paragraph">A <span class="st300_term light">light</span> describes a light source within a scene. There are many different types of lights, each with different behaviours. Lights may or may not cast shadows, depending on their type. All lighting in the <span class="st300_term package">r2</span> package is completely dynamic; there is no support for static lighting in any form. Shadows are exclusively provided via shadow mapping, resulting in efficient per-pixel shadows.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.light_clip_group"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss10" href="#st300_p2s2ss10" title="Subsection 2.2.10: Light Clip Group">2.2.10</a></div><div class="st300_subsection_title">Light Clip Group</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss10c1" href="#st300_p2s2ss10c1" title="Paragraph 2.2.10.1">1</a></div><div class="st300_paragraph">A <span class="st300_term light">light clip group</span> is a means of constraining the contributions of groups of <a class="st300_link" href="p2s2.xhtml#di.concepts.light">lights</a> to a provided <span class="st300_term term">volume</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss10c2" href="#st300_p2s2ss10c2" title="Paragraph 2.2.10.2">2</a></div><div class="st300_paragraph">Because, like most renderers, the <span class="st300_term package">r2</span> package implements so-called <span class="st300_term term">local illumination</span>, lights that do not have explicit <span class="st300_term term">shadow mapping</span> enabled are able to bleed through solid objects:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s2ss10c3" href="#st300_p2s2ss10c3" title="Formal item 2.2.10.3: Local Light Bleed">2.2.10.3 Local Light Bleed</a></div><div class="st300_formal_item_content"><img class="st300_image" alt="Local light bleeding." src="images/lightbleed_noclip.png"/></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss10c4" href="#st300_p2s2ss10c4" title="Paragraph 2.2.10.4">4</a></div><div class="st300_paragraph">Enabling shadow mapping for every single light source would be prohibitively expensive <span class="st300_footnote_reference">[<a href="p2s2.xhtml#st300_f_2627_0" id="st300_fr_2091" title="Jump to footnote di.concepts.shadow_expensive (reference 0)">3</a>]</span>, but for some scenes, acceptable results can be achieved by simply preventing the light source from affecting pixels outside of a given <span class="st300_term term">clip volume</span>.</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s2ss10c5" href="#st300_p2s2ss10c5" title="Formal item 2.2.10.5: Local Light Clipped">2.2.10.5 Local Light Clipped</a></div><div class="st300_formal_item_content"><img class="st300_image" alt="Local light clipped to a volume." src="images/lightbleed_clip.png"/></div></div></div><div class="st300_subsection_container"><a id="di.concepts.light_group"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss11" href="#st300_p2s2ss11" title="Subsection 2.2.11: Light Group">2.2.11</a></div><div class="st300_subsection_title">Light Group</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss11c1" href="#st300_p2s2ss11c1" title="Paragraph 2.2.11.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">light group</span> is similar to a <a class="st300_link" href="p2s2.xhtml#di.concepts.light_clip_group">light clip group</a> in that is intended to constrain the contributions of a set of lights. A light group instead requires the cooperation of a renderer that can mark groups of <a class="st300_link" href="p2s2.xhtml#di.concepts.instance">instances</a> using the <span class="st300_term term">stencil</span> component of the current <a class="st300_link" href="p2s2.xhtml#di.concepts.gbuffer">geometry buffer</a>. At most <span class="st300_term constant">15</span> light groups can be present in a given scene, and for a given light group <span class="st300_term variable">n</span>, only instances in group <span class="st300_term variable">n</span> will be affected by lights in group <span class="st300_term variable">n</span>. By default, if a group is not otherwise specified, all lights and instances are rendered in group <span class="st300_term constant">1</span>.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.shader"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss12" href="#st300_p2s2ss12" title="Subsection 2.2.12: Shader">2.2.12</a></div><div class="st300_subsection_title">Shader</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss12c1" href="#st300_p2s2ss12c1" title="Paragraph 2.2.12.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">shader</span> is a small program that executes on the GPU and is used to produce images. The <span class="st300_term package">r2</span> package provides a wide array of general-purpose shaders, and the intention is that users of the package will <span class="st300_term emphasis">not</span> typically have to write their own <span class="st300_footnote_reference">[<a href="p2s2.xhtml#st300_f_2566_0" id="st300_fr_2318" title="Jump to footnote di.concepts.shader.r1_material (reference 0)">2</a>]</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss12c2" href="#st300_p2s2ss12c2" title="Paragraph 2.2.12.2">2</a></div><div class="st300_paragraph">The package roughly divides shaders into categories. <span class="st300_term term">Single instance shaders</span> are typically used to calculate and render the surface attributes of <a class="st300_link" href="p2s2.xhtml#di.concepts.instance.single">single instances</a> into a <a class="st300_link" href="p2s2.xhtml#di.concepts.gbuffer">geometry buffer</a>. <span class="st300_term term">Batched instance shaders</span> do the same for <a class="st300_link" href="p2s2.xhtml#di.concepts.instance.batched">batched instances</a>. <span class="st300_term term">Light shaders</span> render the contributions of light sources into a <a class="st300_link" href="p2s2.xhtml#di.concepts.lbuffer">light buffer</a>. There are many other types of shader in the <span class="st300_term package">r2</span> package but users are generally not exposed to them directly.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss12c3" href="#st300_p2s2ss12c3" title="Paragraph 2.2.12.3">3</a></div><div class="st300_paragraph">Shaders are intended to be effectively <span class="st300_term term">stateless</span>. A given shader <span class="st300_term type">S</span> is an opaque function that takes a single parameter value <span class="st300_term type">M</span>, and the user actually supplies <span class="st300_term type">M</span> by configuring a <a class="st300_link" href="p2s2.xhtml#di.concepts.material">material</a> for <span class="st300_term type">S</span> and then using it each frame.</div></div></div><div class="st300_subsection_container"><a id="di.concepts.material"/><div class="st300_subsection_title_number"><a id="st300_p2s2ss13" href="#st300_p2s2ss13" title="Subsection 2.2.13: Material">2.2.13</a></div><div class="st300_subsection_title">Material</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s2ss13c1" href="#st300_p2s2ss13c1" title="Paragraph 2.2.13.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">material</span> is a pair consisting of a <a class="st300_link" href="p2s2.xhtml#di.concepts.shader">shader</a> and a set of parameters for that shader <span class="st300_footnote_reference">[<a href="p2s2.xhtml#st300_f_2495_0" id="st300_fr_2493" title="Jump to footnote di.concepts.material.r1_material (reference 0)">1</a>]</span>.</div></div></div><div class="st300_footnotes"><hr/><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_2495_0" href="p2s2.xhtml#st300_fr_2493" title="Jump back to reference 0 of footnote di.concepts.material.r1_material">1</a>]</div><div class="st300_footnote_body">The spiritual ancestor of <span class="st300_term package">r2</span>, the <a class="st300_link_external" href="http://io7m.github.io/r1">r1</a> renderer, exposed only immutable materials. While these made it easier to demonstrate the correctness of the programs using the renderer, it also increased pressure on the garbage collector. Materials in the <span class="st300_term package">r2</span> may optionally be mutable or immutable, and the user is expected understand the difference and the consequences of using one over the other.</div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_2566_0" href="p2s2.xhtml#st300_fr_2318" title="Jump back to reference 0 of footnote di.concepts.shader.r1_material">2</a>]</div><div class="st300_footnote_body">The spiritual ancestor of <span class="st300_term package">r2</span>, the <a class="st300_link_external" href="http://io7m.github.io/r1">r1</a> renderer, exposed a fixed material system and did not expose shaders to the user at all. While this made it easier to demonstrate the correctness of the renderer implementation, it turned out to be needlessly inflexible and made it more difficult to experiment with new renderer features.</div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_2627_0" href="p2s2.xhtml#st300_fr_2091" title="Jump back to reference 0 of footnote di.concepts.shadow_expensive">3</a>]</div><div class="st300_footnote_body">However, the <span class="st300_term package">r2</span> package places no limits on the number of lights that have shadow maps, so enabling them for all light sources is possible, if not actually advisable.</div></div><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_2627_1" href="p2s20.xhtml#st300_fr_13660" title="Jump back to reference 1 of footnote di.concepts.shadow_expensive">3</a>]</div><div class="st300_footnote_body">However, the <span class="st300_term package">r2</span> package places no limits on the number of lights that have shadow maps, so enabling them for all light sources is possible, if not actually advisable.</div></div></div></div><div class="st300_navbar st300_navbar_bottom"><hr class="st300_hr"/><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s1.xhtml#st300_p2s1" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s3.xhtml#st300_p2s3" title="Go to next page">Next</a></td></tr><tr><td class="st300_navbar_prev_title_cell">2.1. Conventions</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.3. Coordinate Systems</td></tr></table></div></div></body></html>
