<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>com.io7m.r2 0.3.0-SNAPSHOT Documentation: 2.19. Deferred Rendering: Geometry</title><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><link rel="stylesheet" type="text/css" href="kstructural-layout.css"/><link rel="stylesheet" type="text/css" href="kstructural-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st300_body"><div class="st300_navbar st300_navbar_top"><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_title_cell">2.18. Deferred Rendering</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.20. Deferred Rendering: Lighting</td></tr><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s18.xhtml#st300_p2s18" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s20.xhtml#st300_p2s20" title="Go to next page">Next</a></td></tr></table><hr class="st300_hr"/></div><div class="st300_section_container"><a id="di.deferred.geom"/><div class="st300_section_title_number"><a id="st300_p2s19" href="#st300_p2s19" title="Section 2.19: Deferred Rendering: Geometry">2.19</a></div><div class="st300_section_title">Deferred Rendering: Geometry</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss1" title="Link to subsection 2.19.1: Overview">2.19.1. Overview</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss2" title="Link to subsection 2.19.2: Groups">2.19.2. Groups</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss3" title="Link to subsection 2.19.3: Geometry Buffer">2.19.3. Geometry Buffer</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss4" title="Link to subsection 2.19.4: Algorithm">2.19.4. Algorithm</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss5" title="Link to subsection 2.19.5: Ordering/Batching">2.19.5. Ordering/Batching</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s19.xhtml#st300_p2s19ss6" title="Link to subsection 2.19.6: Normal Compression">2.19.6. Normal Compression</a></li></ul><div class="st300_subsection_container"><a id="di.deferred.geom.overview"/><div class="st300_subsection_title_number"><a id="st300_p2s19ss1" href="#st300_p2s19ss1" title="Subsection 2.19.1: Overview">2.19.1</a></div><div class="st300_subsection_title">Overview</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss1c1" href="#st300_p2s19ss1c1" title="Paragraph 2.19.1.1">1</a></div><div class="st300_paragraph">The first step in <span class="st300_term term">deferred rendering</span> involves rendering all opaque instances in the current scene to a <a class="st300_link" href="p2s19.xhtml#di.deferred.geom.gbuffer">geometry buffer</a>. This populated geometry buffer is then primarily used in later stages to calculate <a class="st300_link" href="p2s20.xhtml#di.deferred.light">lighting</a>, but can also be used to implement effects such as <a class="st300_link" href="p2s29.xhtml#di.ssao">screen-space ambient occlusion</a> and <a class="st300_link" href="p2s30.xhtml#di.emission">emission</a>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss1c2" href="#st300_p2s19ss1c2" title="Paragraph 2.19.1.2">2</a></div><div class="st300_paragraph">In the <span class="st300_term package">r2</span> package, the primary implementation of the deferred geometry rendering algorithm is the <a class="st300_link_external" href="apidocs/com/io7m/r2/core/R2GeometryRenderer.html">R2GeometryRenderer</a> type.</div></div></div><div class="st300_subsection_container"><a id="di.deferred.geom.group"/><div class="st300_subsection_title_number"><a id="st300_p2s19ss2" href="#st300_p2s19ss2" title="Subsection 2.19.2: Groups">2.19.2</a></div><div class="st300_subsection_title">Groups</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss2c1" href="#st300_p2s19ss2c1" title="Paragraph 2.19.2.1">1</a></div><div class="st300_paragraph"><span class="st300_term term">Groups</span> are a simple means to constrain the contributions of sets of specific light sources to sets of specific rendered instances. Instances and lights are assigned a <span class="st300_term term">group number</span> in the range <span class="st300_term expression">[1, 15]</span>. If the programmer does not explicitly assign a number, the number <span class="st300_term constant">1</span> is assigned automatically. During rendering, the group number of each rendered instance is written to the <a class="st300_link" href="p2s11.xhtml#di.stencil">stencil buffer</a>. Then, when the light contribution is calculated for a light with group number <span class="st300_term expression">n</span>, only those pixels that have a corresponding value of <span class="st300_term expression">n</span> in the stencil buffer are allowed to be modified.</div></div></div><div class="st300_subsection_container"><a id="di.deferred.geom.gbuffer"/><div class="st300_subsection_title_number"><a id="st300_p2s19ss3" href="#st300_p2s19ss3" title="Subsection 2.19.3: Geometry Buffer">2.19.3</a></div><div class="st300_subsection_title">Geometry Buffer</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss3c1" href="#st300_p2s19ss3c1" title="Paragraph 2.19.3.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">geometry buffer</span> is a <a class="st300_link" href="p2s7.xhtml#di.render-target">render target</a> in which the surface attributes of objects are stored prior to being combined with the contents of a <a class="st300_link" href="p2s20.xhtml#di.deferred.light.lbuffer">light buffer</a> to produce a lit image.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss3c2" href="#st300_p2s19ss3c2" title="Paragraph 2.19.3.2">2</a></div><div class="st300_paragraph">One of the main implementation issues in any deferred renderer is deciding which surface attributes (such as position, albedo, normals, etc) to store and which to reconstruct. The more attributes that are stored, the less work is required during rendering to reconstruct those values. However, storing more attributes requires a larger geometry buffer and more memory bandwidth to actually populate that geometry buffer during rendering. The <span class="st300_term package">r2</span> package leans towards having a more compact geometry buffer and doing slightly more reconstruction work during rendering.</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss3c3" href="#st300_p2s19ss3c3" title="Formal item 2.19.3.3: Geometry Buffer">2.19.3.3 Geometry Buffer</a></div><div class="st300_formal_item_content"><img class="st300_image" alt="Geometry Buffer" src="images/gbuffer.png"/></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss3c4" href="#st300_p2s19ss3c4" title="Paragraph 2.19.3.4">4</a></div><div class="st300_paragraph">The <span class="st300_term package">r2</span> package explicitly stores the albedo, normals, emission level, and specular color of surfaces. Additionally, the depth buffer is sampled to recover the depth of surfaces. The eye-space positions of surfaces are recovered via an efficient <a class="st300_link" href="p2s21.xhtml#di.deferred-position-recon">position reconstruction</a> algorithm which uses the current viewing projection and <a class="st300_link" href="p2s24.xhtml#di.log_depth">logarithmic depth</a> value as input. In order to reduce the amount of storage required, three-dimensional eye-space normal vectors are stored compressed as two <span class="st300_term expression">16</span> half-precision floating point components via a simple <a class="st300_link" href="p2s19.xhtml#di.deferred.geom.normal-compression">mapping</a>. This means that only <span class="st300_term expression">32</span> bits are required to store the vectors, and very little precision is lost. The precise format of the geometry buffer is as follows:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss3c5" href="#st300_p2s19ss3c5" title="Formal item 2.19.3.5: Geometry Buffer Format">2.19.3.5 Geometry Buffer Format</a></div><div class="st300_formal_item_content"><img class="st300_image" alt="Geometry Buffer Format" src="images/gbuffer_format_0.png"/></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss3c6" href="#st300_p2s19ss3c6" title="Paragraph 2.19.3.6">6</a></div><div class="st300_paragraph">The <span class="st300_term variable">albedo_r</span>, <span class="st300_term variable">albedo_g</span>, and <span class="st300_term variable">albedo_b</span> components correspond to the red, green, and blue components of the surface, respectively. The <span class="st300_term variable">emission</span> component refers to the surface emission level. The <span class="st300_term variable">normal_x</span> and <span class="st300_term variable">normal_y</span> components correspond to the two components of the <a class="st300_link" href="p2s19.xhtml#di.deferred.geom.normal-compression">compressed surface normal</a> vector. The <span class="st300_term variable">specular_r</span>, <span class="st300_term variable">specular_g</span>, and <span class="st300_term variable">specular_b</span> components correspond to the red, green, and blue components of the surface specularity. Surfaces that will not receive specular highlights simply have <span class="st300_term expression">0</span> for each component. The <span class="st300_term variable">specular_e</span> component holds the surface <span class="st300_term term">specular exponent</span> divided by <span class="st300_term expression">256</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss3c7" href="#st300_p2s19ss3c7" title="Paragraph 2.19.3.7">7</a></div><div class="st300_paragraph">In the <span class="st300_term package">r2</span> package, geometry buffers are instances of <a class="st300_link_external" href="apidocs/com/io7m/r2/core/R2GeometryBufferType.html">R2GeometryBufferType</a>.</div></div></div><div class="st300_subsection_container"><div class="st300_subsection_title_number"><a id="st300_p2s19ss4" href="#st300_p2s19ss4" title="Subsection 2.19.4: Algorithm">2.19.4</a></div><div class="st300_subsection_title">Algorithm</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss4c1" href="#st300_p2s19ss4c1" title="Paragraph 2.19.4.1">1</a></div><div class="st300_paragraph">An informal description of the geometry rendering algorithm as implemented in the <span class="st300_term package">r2</span> package is as follows:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss4c2" href="#st300_p2s19ss4c2" title="Formal item 2.19.4.2: Geometry Rendering Overview">2.19.4.2 Geometry Rendering Overview</a></div><div class="st300_formal_item_content"><ol class="st300_list_ordered"><li class="st300_list_item">Set the current <a class="st300_link" href="p2s7.xhtml#di.render-target">render target</a> to a geometry buffer <span class="st300_term expression">b</span>.</li><li class="st300_list_item">Enable writing to the depth and stencil buffers, and enable stencil testing. Enable depth testing such that only pixels with a depth less than or equal to the current depth are touched.</li><li class="st300_list_item">For each <a class="st300_link" href="p2s19.xhtml#di.deferred.geom.group">group</a> <span class="st300_term expression">g</span>: <ol class="st300_list_ordered"><li class="st300_list_item">Configure stencil testing such that only pixels with the <a class="st300_link" href="p2s11.xhtml#di.stencil.allow_bit">allow bit</a> enabled are touched, and configure stencil writing such that the index of <span class="st300_term expression">g</span> is recorded in the stencil buffer.</li><li class="st300_list_item">For each instance <span class="st300_term expression">o</span> in <span class="st300_term expression">g</span>: <ol class="st300_list_ordered"><li class="st300_list_item">Render the surface albedo, eye space normals, specular color, and emission level of <span class="st300_term expression">o</span> into <span class="st300_term expression">b</span>. <a class="st300_link" href="p2s23.xhtml#di.normal-mapping">Normal mapping</a> is performed during rendering, and if <span class="st300_term expression">o</span> does not have specular highlights, then a pure black (zero intensity) specular color is written. Effects such as <a class="st300_link" href="p2s25.xhtml#di.environment-mapping">environment mapping</a> are considered to be part of the surface albedo and so are performed in this step.</li></ol></li></ol></li></ol></div></div></div><div class="st300_subsection_container"><a id="di.deferred.geom.ordering"/><div class="st300_subsection_title_number"><a id="st300_p2s19ss5" href="#st300_p2s19ss5" title="Subsection 2.19.5: Ordering/Batching">2.19.5</a></div><div class="st300_subsection_title">Ordering/Batching</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss5c1" href="#st300_p2s19ss5c1" title="Paragraph 2.19.5.1">1</a></div><div class="st300_paragraph">Due to the use of depth testing, the geometry rendering algorithm is effectively order independent: Instances can be rendered in any order and the final image will always be the same. However, there are efficiency advantages in rendering instances in a particular order. The most efficient order of rendering is the one that minimizes internal OpenGL <span class="st300_term term">state changes</span>. NVIDIA's <a class="st300_link_external" href="http://media.steampowered.com/apps/steamdevdays/slides/beyondporting.pdf">Beyond Porting</a> presentation gives the relative cost of OpenGL state changes, from most expensive to least expensive, as <span class="st300_footnote_reference">[<a href="p2s19.xhtml#st300_f_13230_0" id="st300_fr_13070" title="Jump to footnote di.deferred.geom.ordering.perf (reference 0)">18</a>]</span>:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss5c2" href="#st300_p2s19ss5c2" title="Formal item 2.19.5.2: State changes">2.19.5.2 State changes</a></div><div class="st300_formal_item_content"><ol class="st300_list_ordered"><li class="st300_list_item">Render target changes: 60,000/second</li><li class="st300_list_item">Program bindings: 300,000/second</li><li class="st300_list_item">Texture bindings: 1,500,000/second</li><li class="st300_list_item">Vertex format (exact cost unspecified)</li><li class="st300_list_item">UBO bindings (exact cost unspecified)</li><li class="st300_list_item">Vertex Bindings (exact cost unspecified)</li><li class="st300_list_item">Uniform Updates: 10,000,000/second</li></ol></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss5c3" href="#st300_p2s19ss5c3" title="Paragraph 2.19.5.3">3</a></div><div class="st300_paragraph">Therefore, it is beneficial to order rendering operations such that the most expensive state changes happen the least frequently.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss5c4" href="#st300_p2s19ss5c4" title="Paragraph 2.19.5.4">4</a></div><div class="st300_paragraph">The <a class="st300_link_external" href="apidocs/com/io7m/r2/core/R2SceneOpaquesType.html">R2SceneOpaquesType</a> type provides a simple interface that allows the programmer to specify instances without worrying about ordering concerns. When all instances have been submitted, they will be delivered to a given consumer (typically a geometry renderer) via the <span class="st300_term function">opaquesExecute</span> method in the order that would be most efficient for rendering. Typically, this means that instances are first batched by <a class="st300_link" href="p2s9.xhtml#di.shaders.instance">shader</a>, because switching programs is the second most expensive type of render state change. The shader-batched instances are then batched by <a class="st300_link" href="p2s9.xhtml#di.shaders.instance.material">material</a>, in order to reduce the number of uniform updates that need to occur per shader.</div></div></div><div class="st300_subsection_container"><a id="di.deferred.geom.normal-compression"/><div class="st300_subsection_title_number"><a id="st300_p2s19ss6" href="#st300_p2s19ss6" title="Subsection 2.19.6: Normal Compression">2.19.6</a></div><div class="st300_subsection_title">Normal Compression</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss6c1" href="#st300_p2s19ss6c1" title="Paragraph 2.19.6.1">1</a></div><div class="st300_paragraph">The <span class="st300_term package">r2</span> package uses a <a class="st300_link_external" href="http://en.wikipedia.org/wiki/Lambert_azimuthal_equal-area_projection">Lambert azimuthal equal-area projection</a> to store surface normal vectors in two components instead of three. This makes use of the fact that normalized vectors represent points on the unit sphere. The mapping from normal vectors to two-dimensional spheremap coordinates is given by <span class="st300_term function">compress</span> <a class="st300_link_external" href="haskell/NormalCompress.hs">NormalCompress.hs</a>:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss6c2" href="#st300_p2s19ss6c2" title="Formal item 2.19.6.2: Normal Compression">2.19.6.2 Normal Compression</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">module NormalCompress where

import qualified Vector3f
import qualified Vector2f
import qualified Normal

compress :: Normal.T -&gt; Vector2f.T
compress n =
  let p = sqrt ((Vector3f.z n * 8.0) + 8.0)
      x = (Vector3f.x n / p) + 0.5
      y = (Vector3f.y n / p) + 0.5
  in Vector2f.V2 x y</pre></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s19ss6c3" href="#st300_p2s19ss6c3" title="Paragraph 2.19.6.3">3</a></div><div class="st300_paragraph">The mapping from two-dimensional spheremap coordinates to normal vectors is given by <span class="st300_term function">decompress</span> <a class="st300_link_external" href="haskell/NormalDecompress.hs">NormalDecompress.hs</a>:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s19ss6c4" href="#st300_p2s19ss6c4" title="Formal item 2.19.6.4: Normal Decompression">2.19.6.4 Normal Decompression</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">module NormalDecompress where

import qualified Vector3f
import qualified Vector2f
import qualified Normal

decompress :: Vector2f.T -&gt; Normal.T
decompress v =
  let fn = Vector2f.V2 ((Vector2f.x v * 4.0) - 2.0) ((Vector2f.y v * 4.0) - 2.0)
      f  = Vector2f.dot2 fn fn
      g  = sqrt (1.0 - (f / 4.0))
      x  = (Vector2f.x fn) * g
      y  = (Vector2f.y fn) * g
      z  = 1.0 - (f / 2.0)
  in Vector3f.V3 x y z</pre></div></div></div><div class="st300_footnotes"><hr/><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_13230_0" href="p2s19.xhtml#st300_fr_13070" title="Jump back to reference 0 of footnote di.deferred.geom.ordering.perf">18</a>]</div><div class="st300_footnote_body">For some reason, the presentation does not specify a publication date. However, inspection of the presentation's metadata suggests that it was written in October 2014, so the numbers given are likely for reasonably high-end 2014-era hardware.</div></div></div></div><div class="st300_navbar st300_navbar_bottom"><hr class="st300_hr"/><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s18.xhtml#st300_p2s18" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s20.xhtml#st300_p2s20" title="Go to next page">Next</a></td></tr><tr><td class="st300_navbar_prev_title_cell">2.18. Deferred Rendering</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.20. Deferred Rendering: Lighting</td></tr></table></div></div></body></html>
