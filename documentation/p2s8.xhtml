<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-r2 0.2.1 Documentation: 2.8. Shaders</title><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8"/><link rel="stylesheet" type="text/css" href="kstructural-layout.css"/><link rel="stylesheet" type="text/css" href="kstructural-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st300_body"><div class="st300_navbar st300_navbar_top"><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_title_cell">2.7. Render Targets</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.9. Shaders: Instance</td></tr><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s7.xhtml#st300_p2s7" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s9.xhtml#st300_p2s9" title="Go to next page">Next</a></td></tr></table><hr class="st300_hr"/></div><div class="st300_section_container"><a id="di.shaders"/><div class="st300_section_title_number"><a id="st300_p2s8" href="#st300_p2s8" title="Section 2.8: Shaders">2.8</a></div><div class="st300_section_title">Shaders</div><ul class="st300_contents st300_section_contents_outer st300_section_contents"><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s8.xhtml#st300_p2s8ss1" title="Link to subsection 2.8.1: Overview">2.8.1. Overview</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s8.xhtml#st300_p2s8ss2" title="Link to subsection 2.8.2: Interface And Calling Protocol">2.8.2. Interface And Calling Protocol</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s8.xhtml#st300_p2s8ss3" title="Link to subsection 2.8.3: Shader Modules">2.8.3. Shader Modules</a></li><li class="st300_contents_item st300_contents_item1 st300_contents_item_subsection"><a href="p2s8.xhtml#st300_p2s8ss4" title="Link to subsection 2.8.4: Types">2.8.4. Types</a></li></ul><div class="st300_subsection_container"><a id="di.shaders.overview"/><div class="st300_subsection_title_number"><a id="st300_p2s8ss1" href="#st300_p2s8ss1" title="Subsection 2.8.1: Overview">2.8.1</a></div><div class="st300_subsection_title">Overview</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss1c1" href="#st300_p2s8ss1c1" title="Paragraph 2.8.1.1">1</a></div><div class="st300_paragraph">A <span class="st300_term term">shader</span> is a small program that executes on the GPU and is used to produce images. In the <span class="st300_term package">r2</span> package, shaders perform a variety of tasks and the programmer is not always exposed to them directly. The primary shader types to which the programmer is directly exposed are <a class="st300_link" href="p2s9.xhtml#di.shaders.instance">instance</a> and <a class="st300_link" href="p2s10.xhtml#di.shaders.light">light</a> shaders.</div></div></div><div class="st300_subsection_container"><a id="di.shaders.interface"/><div class="st300_subsection_title_number"><a id="st300_p2s8ss2" href="#st300_p2s8ss2" title="Subsection 2.8.2: Interface And Calling Protocol">2.8.2</a></div><div class="st300_subsection_title">Interface And Calling Protocol</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss2c1" href="#st300_p2s8ss2c1" title="Paragraph 2.8.2.1">1</a></div><div class="st300_paragraph">Every shader in the <span class="st300_term package">r2</span> package has an associated Java class. Each class may implement one of the interfaces that are themselves subtypes of the <a class="st300_link_external" href="apidocs/com/io7m/r2/core/shaders/types/R2ShaderType.html">R2ShaderType</a> interface. Each class is responsible for uploading parameters to the actual compiled GLSL shader on the GPU. Certain parameters, such as view matrices, the current size of the screen, etc, are only calculated during each rendering pass and therefore will be supplied to the shader classes at more or less the last possible moment. The calculated parameters are supplied via methods defined on the <span class="st300_term type">R2ShaderType</span> subinterfaces, and implementations of the subinterfaces can rely on the methods being called in a very strict predefined order. For example, instances of type <a class="st300_link_external" href="apidocs/com/io7m/r2/core/shaders/types/R2ShaderInstanceSingleUsableType.html">R2ShaderInstanceSingleUsableType</a> will receive calls in exactly this order:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s8ss2c2" href="#st300_p2s8ss2c2" title="Formal item 2.8.2.2: R2ShaderInstanceSingleUsableType call order">2.8.2.2 R2ShaderInstanceSingleUsableType call order</a></div><div class="st300_formal_item_content"><ol class="st300_list_ordered"><li class="st300_list_item">First, <span class="st300_term function">onActivate</span> will be called. It is the class's responsibility to <span class="st300_term term">activate</span> the GLSL shader at this point.</li><li class="st300_list_item">Then <span class="st300_term function">onReceiveViewValues</span> will be called when the current view-specific values have been calculated.</li><li class="st300_list_item">Now, for each material <span class="st300_term expression">m</span> that uses the current shader: <ol class="st300_list_ordered"><li class="st300_list_item"><span class="st300_term function">onReceiveMaterialValues</span> will be called once.</li><li class="st300_list_item">For each instance <span class="st300_term expression">i</span> using that uses a material that uses the current shader, <span class="st300_term function">onReceiveInstanceTransformValues</span> will be called, followed by <span class="st300_term function">onValidate</span>.</li></ol></li></ol></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss2c3" href="#st300_p2s8ss2c3" title="Paragraph 2.8.2.3">3</a></div><div class="st300_paragraph">The final <span class="st300_term function">onValidate</span> call allows the shader to check that all of the required method calls have actually been made by the caller, and the method is permitted to throw <a class="st300_link_external" href="apidocs/com/io7m/r2/core/R2ExceptionShaderValidationFailed.html">R2ExceptionShaderValidationFailed</a> if the caller makes a mistake at any point. The implicit promise is that callers will call all of the methods in the correct order and the correct number of times, and shaders are allowed to loudly complain if and when this does not happen.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss2c4" href="#st300_p2s8ss2c4" title="Paragraph 2.8.2.4">4</a></div><div class="st300_paragraph">Of course, actually requiring the programmer to manually implement all of the above for each new shader would be unreasonable and would just become a new source of bugs. The <span class="st300_term package">r2</span> provides <span class="st300_term term">verifiers</span> to perform the run-time checks listed above without forcing the programmer to implement them all manually. The <a class="st300_link_external" href="apidocs/com/io7m/r2/core/shaders/types/R2ShaderInstanceSingleVerifier.html">R2ShaderInstanceSingleVerifier</a> type, for example, implements the <a class="st300_link_external" href="apidocs/com/io7m/r2/core/shaders/types/R2ShaderInstanceSingleUsableType.html">R2ShaderInstanceSingleUsableType</a> interface and wraps call calls to an existing shader in calls that enforce the invariants and call order described above. The programmer writes the simple version of the shader that simply uploads parameters, and the <span class="st300_term term">verifier</span> prevents callers from calling shader methods in the wrong order.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss2c5" href="#st300_p2s8ss2c5" title="Paragraph 2.8.2.5">5</a></div><div class="st300_paragraph">The calling protocol described both ensures that all shader parameters will be set and that the renderers themselves are insulated from the interfaces of actual GLSL shaders. Failing to set parameters, attempting to set parameters that no longer exist, or passing values of the wrong types to GLSL shaders is a common source of bugs in OpenGL programs and almost always results in either silent failure or corrupted visuals. The <span class="st300_term package">r2</span> package takes care to ensure that mistakes of that type are difficult to make.</div></div></div><div class="st300_subsection_container"><a id="di.shaders.modules"/><div class="st300_subsection_title_number"><a id="st300_p2s8ss3" href="#st300_p2s8ss3" title="Subsection 2.8.3: Shader Modules">2.8.3</a></div><div class="st300_subsection_title">Shader Modules</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss3c1" href="#st300_p2s8ss3c1" title="Paragraph 2.8.3.1">1</a></div><div class="st300_paragraph">Although the GLSL shading language is anti-modular in the sense that it has one large namespace, the <span class="st300_term package">r2</span> package attempts to relieve some of the pain of shader management by delegating to the <a class="st300_link_external" href="http://io7m.github.io/sombrero">sombrero</a> package. The <span class="st300_term package">sombrero</span> package provides a preprocessor for shader code, allowing shader code to make use of <span class="st300_term function">#include</span> directives. It also provides a system for publishing and importing modules full of shaders based internally on the standard Java <a class="st300_link_external" href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html">ServiceLoader</a> API. This allows users that want to write their own shaders to import much of the re-usable shader code from the <span class="st300_term package">r2</span> package into their own shaders without needing to do anything more than have the correct shader jar on the Java classpath <span class="st300_footnote_reference">[<a href="p2s8.xhtml#st300_f_7086_0" id="st300_fr_6994" title="Jump to footnote di.shaders.modules.classpath (reference 0)">14</a>]</span>.</div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss3c2" href="#st300_p2s8ss3c2" title="Paragraph 2.8.3.2">2</a></div><div class="st300_paragraph">As a simple example, if the user writing custom shaders wants to take advantage of the bilinear interpolation functions used in many <span class="st300_term package">r2</span> shaders, the following <span class="st300_term function">#include</span> is sufficient:</div></div><div class="st300_formal_item"><div class="st300_formal_item_title"><a id="st300_p2s8ss3c3" href="#st300_p2s8ss3c3" title="Formal item 2.8.3.3: Include">2.8.3.3 Include</a></div><div class="st300_formal_item_content"><pre class="st300_verbatim">#include &lt;com.io7m.r2.shaders.core/R2Bilinear.h&gt;

vec3 x = R2_bilinearInterpolate3(...);</pre></div></div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss3c4" href="#st300_p2s8ss3c4" title="Paragraph 2.8.3.4">4</a></div><div class="st300_paragraph">The text <span class="st300_term package">com.io7m.r2.shaders.core</span> is considered to be the module name, and the <span class="st300_term file">R2Bilinear.h</span> name refers to that file within the module. The <span class="st300_term package">sombrero</span> resolver maps the request to a concrete resource on the filesystem or in a jar file and returns the content for inclusion.</div></div></div><div class="st300_subsection_container"><a id="di.shaders.types"/><div class="st300_subsection_title_number"><a id="st300_p2s8ss4" href="#st300_p2s8ss4" title="Subsection 2.8.4: Types">2.8.4</a></div><div class="st300_subsection_title">Types</div><div class="st300_paragraph_container"><div class="st300_paragraph_number"><a id="st300_p2s8ss4c1" href="#st300_p2s8ss4c1" title="Paragraph 2.8.4.1">1</a></div><div class="st300_paragraph">In the <span class="st300_term package">r2</span> package, shaders are instances of <a class="st300_link_external" href="apidocs/com/io7m/r2/core/shaders/types/R2ShaderType.html">R2ShaderType</a>.</div></div></div><div class="st300_footnotes"><hr/><div class="st300_footnote_container"><div class="st300_footnote_id">[<a id="st300_f_7086_0" href="p2s8.xhtml#st300_fr_6994" title="Jump back to reference 0 of footnote di.shaders.modules.classpath">14</a>]</div><div class="st300_footnote_body">The core of the <span class="st300_term package">r2</span> package depends directly on the shader package, so the correct jars will inevitably be on the classpath already.</div></div></div></div><div class="st300_navbar st300_navbar_bottom"><hr class="st300_hr"/><table class="st300_navbar_table" summary="st300_Navigation bar"><tr><td class="st300_navbar_prev_file_cell"><a rel="previous" href="p2s7.xhtml#st300_p2s7" title="Go to previous page">Previous</a></td><td class="st300_navbar_up_file_cell"><a rel="up" href="p2.xhtml#st300_p2" title="Go to parent page">Up</a></td><td class="st300_navbar_next_file_cell"><a rel="next" href="p2s9.xhtml#st300_p2s9" title="Go to next page">Next</a></td></tr><tr><td class="st300_navbar_prev_title_cell">2.7. Render Targets</td><td class="st300_navbar_up_title_cell">2. Design And Implementation</td><td class="st300_navbar_next_title_cell">2.9. Shaders: Instance</td></tr></table></div></div></body></html>
